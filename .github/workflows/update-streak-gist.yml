name: Update Streak (Gist cache)

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: "0 3 * * *"   # daily 03:00 UTC (~09:00 Dhaka)
  workflow_dispatch: {}

jobs:
  refresh:
    runs-on: ubuntu-latest
    env:
      GH_USER: shahriarbd10
      GIST_FILENAME: streak.svg

    steps:
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Who am I? (check token owner)
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          ME=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                       -H "Accept: application/vnd.github+json" \
                       https://api.github.com/user | jq -r '.login')
          echo "Token owner: $ME"
          if [ "$ME" != "${{ env.GH_USER }}" ]; then
            echo "❌ Token must be created from the same account as GH_USER (${{
              env.GH_USER
            }}). Current: $ME"
            exit 1
          fi

      - name: Download streak SVG (with retries)
        run: |
          URL="https://streak-stats.demolab.com?user=${{ env.GH_USER }}&theme=radical&hide_border=true&border_radius=12"
          for i in 1 2 3 4 5 6; do
            echo "Attempt $i..."
            if curl -fsSL "$URL" -o "${{ env.GIST_FILENAME }}"; then
              break
            fi
            sleep $((2**i))  # 2,4,8,16,32,64s
          done
          if [ ! -s "${{ env.GIST_FILENAME }}" ]; then
            echo "Empty SVG, abort update"; exit 0
          fi
          if ! grep -q "<svg" "${{ env.GIST_FILENAME }}"; then
            echo "Not an SVG, abort update"; exit 0
          fi
          if grep -qi "Failed to retrieve contributions" "${{ env.GIST_FILENAME }}"; then
            echo "Service error page detected; abort update"; exit 0
          fi

      - name: Find existing gist by filename
        id: find_gist
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          resp="$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" \
                           -H "Accept: application/vnd.github+json" \
                           "https://api.github.com/gists?per_page=100")"
          gist_id="$(echo "$resp" | jq -r --arg f "${{ env.GIST_FILENAME }}" '
            map(select(.files[$f])) | .[0].id // empty
          ')"
          echo "gist_id=$gist_id" >> $GITHUB_OUTPUT

      - name: Create gist if missing
        if: steps.find_gist.outputs.gist_id == ''
        id: create_gist
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          body="$(jq -n --arg f "${{ env.GIST_FILENAME }}" \
                         --arg c "$(cat "${{ env.GIST_FILENAME }}")" \
                         --arg d "Cached GitHub Streak for ${{ env.GH_USER }}" \
            '{description:$d, public:false, files:{($f):{content:$c}}}')"
          create_resp="$(curl -fsSL -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/gists \
            -d "$body")"
          new_id="$(echo "$create_resp" | jq -r '.id')"
          if [ -z "$new_id" ] || [ "$new_id" = "null" ]; then
            echo "❌ Failed to create gist:"; echo "$create_resp"; exit 1
          fi
          echo "gist_id=$new_id" >> $GITHUB_OUTPUT

      - name: Determine gist id to use
        id: 08ac5aefc9c72f680701d8239a0eb2a5
        run: |
          id="${{ steps.find_gist.outputs.gist_id }}"
          if [ -z "$id" ]; then
            id="${{ steps.create_gist.outputs.gist_id }}"
          fi
          echo "Using gist id: $id"
          echo "gist_id=$id" >> $GITHUB_OUTPUT
          echo "raw_url=https://gist.githubusercontent.com/${{ env.GH_USER }}/${id}/raw/${{ env.GIST_FILENAME }}" >> $GITHUB_OUTPUT

      - name: Upload (PATCH) latest SVG to gist
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ steps.gist_id.outputs.gist_id }}
        run: |
          jq -n --arg c "$(cat "${{ env.GIST_FILENAME }}")" \
                --arg f "${{ env.GIST_FILENAME }}" \
                '{files:{($f):{content:$c}}}' > body.json

          echo "PATCH https://api.github.com/gists/${GIST_ID}"
          curl --fail-with-body -sS -X PATCH \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d @body.json

      - name: Print raw URL for README
        run: |
          echo "Use this in README:"
          echo "${{ steps.gist_id.outputs.raw_url }}"
