name: Update Streak (Gist cache)

permissions:
  contents: write   # allow pushing assets/streak.svg

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: "0 3 * * *"   # daily 03:00 UTC (~09:00 Dhaka)
  workflow_dispatch: {}

jobs:
  refresh:
    runs-on: ubuntu-latest
    env:
      GH_USER: shahriarbd10
      GIST_ID: 08ac5aefc9c72f680701d8239a0eb2a5
      GIST_FILENAME: streak.svg

    steps:
      - name: Checkout (full history so we can pull/rebase and push)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq & prepare folder
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          mkdir -p assets

      - name: Who am I? (token must be the gist owner)
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          ME=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" https://api.github.com/user | jq -r '.login')
          echo "Token owner: $ME"
          test "$ME" = "${{ env.GH_USER }}" || (echo "❌ GIST_TOKEN must be created by ${{ env.GH_USER }}"; exit 1)

      - name: Download streak SVG (cache-busted, with retries)
        run: |
          URL="https://streak-stats.demolab.com?user=${{ env.GH_USER }}&theme=radical&hide_border=true&border_radius=12&_=${{ github.run_id }}"
          for i in 1 2 3 4 5 6; do
            echo "Attempt $i..."
            if curl -fsS -H 'Cache-Control: no-cache' "$URL" -o "${{ env.GIST_FILENAME }}"; then
              break
            fi
            sleep $((2**i))
          done
          if [ ! -s "${{ env.GIST_FILENAME }}" ]; then echo "Empty SVG, abort"; exit 0; fi
          if ! grep -q "<svg" "${{ env.GIST_FILENAME }}"; then echo "Not SVG, abort"; exit 0; fi
          if grep -qi "Failed to retrieve contributions" "${{ env.GIST_FILENAME }}"; then echo "Service error page; abort"; exit 0; fi
          sha256sum "${{ env.GIST_FILENAME }}" | cut -d' ' -f1 > new.sha

      - name: Preflight GET gist (confirm access & get previous hash)
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          CODE=$(curl -sS -o gist.json -w "%{http_code}" \
            -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/gists/${{ env.GIST_ID }}")
          echo "GET /gists/${{ env.GIST_ID }} -> ${CODE}"
          [ "$CODE" = "200" ] || (cat gist.json; exit 1)
          OWNER=$(jq -r '.owner.login' gist.json)
          [ "$OWNER" = "${{ env.GH_USER }}" ] || (echo "❌ Gist must be owned by ${{ env.GH_USER }}"; exit 1)
          RAW=$(jq -r --arg f "${{ env.GIST_FILENAME }}" '.files[$f].raw_url // empty' gist.json)
          if [ -n "$RAW" ]; then
            curl -fsS -H 'Cache-Control: no-cache' "${RAW}?_=${{ github.run_id }}" -o old.svg || true
            if [ -s old.svg ]; then sha256sum old.svg | cut -d' ' -f1 > old.sha; else echo "none" > old.sha; fi
          else
            echo "none" > old.sha
          fi
          echo "Old hash: $(cat old.sha)"
          echo "New hash: $(cat new.sha)"

      - name: PATCH gist (only if content changed)
        if: ${{ hashFiles('new.sha') != hashFiles('old.sha') }}
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          jq -n --arg c "$(cat "${{ env.GIST_FILENAME }}")" --arg f "${{ env.GIST_FILENAME }}" \
            '{files:{($f):{content:$c}}}' > body.json
          echo "PATCH https://api.github.com/gists/${{ env.GIST_ID }}"
          curl --fail-with-body -sS -X PATCH \
            -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/gists/${{ env.GIST_ID }}" \
            -d @body.json

      - name: Update local fallback (assets/streak.svg) and push safely
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          cp "${{ env.GIST_FILENAME }}" assets/streak.svg
          if [[ -n "$(git status --porcelain assets/streak.svg)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            # pull latest to avoid 'fetch first' errors
            git fetch origin "${BRANCH}"
            git pull --rebase origin "${BRANCH}"
            git add assets/streak.svg
            git commit -m "chore: update cached streak.svg" || echo "Nothing to commit"
            git push origin "HEAD:${BRANCH}"
          else
            echo "No local changes."
          fi

      - name: Print README URL
        run: |
          echo "Use this in README (stable):"
          echo "https://gist.githubusercontent.com/${{ env.GH_USER }}/${{ env.GIST_ID }}/raw/${{ env.GIST_FILENAME }}"
